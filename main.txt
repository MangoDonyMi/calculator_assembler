section .data
    num1 db 0
    num2 db 0
    result db 0

section .text
    global _start
_start:
    ; Ввод первого числа
    mov eax, 3        ; системный вызов для чтения
    mov ebx, 0        ; дескриптор файла stdin
    mov ecx, num1     ; буфер для сохранения числа
    mov edx, 2        ; количество байт для чтения
    int 0x80          ; выполнить системный вызов

    ; Ввод второго числа
    mov eax, 3        ; системный вызов для чтения
    mov ebx, 0        ; дескриптор файла stdin
    mov ecx, num2     ; буфер для сохранения числа
    mov edx, 2        ; количество байт для чтения
    int 0x80          ; выполнить системный вызов

    ; Преобразование строк в числа
    mov al, byte[num1]
    sub al, '0'       ; конвертировать ASCII-код в цифру
    mov bl, byte[num2]
    sub bl, '0'       ; конвертировать ASCII-код в цифру

    ; Выполнение операции сложения
    add al, bl

    ; Преобразование результата в строку
    add al, '0'       ; конвертировать цифру в ASCII-код
    mov byte[result], al

    ; Вывод результата
    mov eax, 4        ; системный вызов для записи
    mov ebx, 1        ; дескриптор файла stdout
    mov ecx, result   ; буфер с результатом
    mov edx, 1        ; количество байт для записи
    int 0x80          ; выполнить системный вызов

    ; Выход из программы
    mov eax, 1        ; системный вызов для exit
    xor ebx, ebx      ; код возврата 0
    int 0x80          ; выполнить системный вызов
